{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "from scipy.stats import f_oneway, kruskal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Initial observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FIPS</th>\n",
       "      <th>year</th>\n",
       "      <th>percent_65plus</th>\n",
       "      <th>percent_smokers</th>\n",
       "      <th>percent_diabetes</th>\n",
       "      <th>percent_obese</th>\n",
       "      <th>copd_death_rate</th>\n",
       "      <th>hypertension_death_rate</th>\n",
       "      <th>total_heart_disease_death_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>FIPS</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-1.042344e-18</td>\n",
       "      <td>0.052471</td>\n",
       "      <td>-0.040713</td>\n",
       "      <td>-0.058241</td>\n",
       "      <td>-0.023353</td>\n",
       "      <td>-0.089099</td>\n",
       "      <td>0.105624</td>\n",
       "      <td>-0.070901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <td>-1.042344e-18</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.266650</td>\n",
       "      <td>-0.295032</td>\n",
       "      <td>0.136955</td>\n",
       "      <td>0.195074</td>\n",
       "      <td>0.042018</td>\n",
       "      <td>0.139851</td>\n",
       "      <td>-0.065718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>percent_65plus</th>\n",
       "      <td>5.247134e-02</td>\n",
       "      <td>2.666503e-01</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.139812</td>\n",
       "      <td>-0.101278</td>\n",
       "      <td>0.002430</td>\n",
       "      <td>-0.053377</td>\n",
       "      <td>-0.091122</td>\n",
       "      <td>-0.068018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>percent_smokers</th>\n",
       "      <td>-4.071272e-02</td>\n",
       "      <td>-2.950320e-01</td>\n",
       "      <td>-0.139812</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.364971</td>\n",
       "      <td>0.346446</td>\n",
       "      <td>0.499792</td>\n",
       "      <td>0.169998</td>\n",
       "      <td>0.498589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>percent_diabetes</th>\n",
       "      <td>-5.824057e-02</td>\n",
       "      <td>1.369554e-01</td>\n",
       "      <td>-0.101278</td>\n",
       "      <td>0.364971</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.634311</td>\n",
       "      <td>0.382408</td>\n",
       "      <td>0.339235</td>\n",
       "      <td>0.576924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>percent_obese</th>\n",
       "      <td>-2.335252e-02</td>\n",
       "      <td>1.950739e-01</td>\n",
       "      <td>0.002430</td>\n",
       "      <td>0.346446</td>\n",
       "      <td>0.634311</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.353073</td>\n",
       "      <td>0.323396</td>\n",
       "      <td>0.515350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>copd_death_rate</th>\n",
       "      <td>-8.909892e-02</td>\n",
       "      <td>4.201750e-02</td>\n",
       "      <td>-0.053377</td>\n",
       "      <td>0.499792</td>\n",
       "      <td>0.382408</td>\n",
       "      <td>0.353073</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.268754</td>\n",
       "      <td>0.551128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hypertension_death_rate</th>\n",
       "      <td>1.056245e-01</td>\n",
       "      <td>1.398512e-01</td>\n",
       "      <td>-0.091122</td>\n",
       "      <td>0.169998</td>\n",
       "      <td>0.339235</td>\n",
       "      <td>0.323396</td>\n",
       "      <td>0.268754</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.404890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_heart_disease_death_rate</th>\n",
       "      <td>-7.090062e-02</td>\n",
       "      <td>-6.571789e-02</td>\n",
       "      <td>-0.068018</td>\n",
       "      <td>0.498589</td>\n",
       "      <td>0.576924</td>\n",
       "      <td>0.515350</td>\n",
       "      <td>0.551128</td>\n",
       "      <td>0.404890</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        FIPS          year  percent_65plus  \\\n",
       "FIPS                            1.000000e+00 -1.042344e-18        0.052471   \n",
       "year                           -1.042344e-18  1.000000e+00        0.266650   \n",
       "percent_65plus                  5.247134e-02  2.666503e-01        1.000000   \n",
       "percent_smokers                -4.071272e-02 -2.950320e-01       -0.139812   \n",
       "percent_diabetes               -5.824057e-02  1.369554e-01       -0.101278   \n",
       "percent_obese                  -2.335252e-02  1.950739e-01        0.002430   \n",
       "copd_death_rate                -8.909892e-02  4.201750e-02       -0.053377   \n",
       "hypertension_death_rate         1.056245e-01  1.398512e-01       -0.091122   \n",
       "total_heart_disease_death_rate -7.090062e-02 -6.571789e-02       -0.068018   \n",
       "\n",
       "                                percent_smokers  percent_diabetes  \\\n",
       "FIPS                                  -0.040713         -0.058241   \n",
       "year                                  -0.295032          0.136955   \n",
       "percent_65plus                        -0.139812         -0.101278   \n",
       "percent_smokers                        1.000000          0.364971   \n",
       "percent_diabetes                       0.364971          1.000000   \n",
       "percent_obese                          0.346446          0.634311   \n",
       "copd_death_rate                        0.499792          0.382408   \n",
       "hypertension_death_rate                0.169998          0.339235   \n",
       "total_heart_disease_death_rate         0.498589          0.576924   \n",
       "\n",
       "                                percent_obese  copd_death_rate  \\\n",
       "FIPS                                -0.023353        -0.089099   \n",
       "year                                 0.195074         0.042018   \n",
       "percent_65plus                       0.002430        -0.053377   \n",
       "percent_smokers                      0.346446         0.499792   \n",
       "percent_diabetes                     0.634311         0.382408   \n",
       "percent_obese                        1.000000         0.353073   \n",
       "copd_death_rate                      0.353073         1.000000   \n",
       "hypertension_death_rate              0.323396         0.268754   \n",
       "total_heart_disease_death_rate       0.515350         0.551128   \n",
       "\n",
       "                                hypertension_death_rate  \\\n",
       "FIPS                                           0.105624   \n",
       "year                                           0.139851   \n",
       "percent_65plus                                -0.091122   \n",
       "percent_smokers                                0.169998   \n",
       "percent_diabetes                               0.339235   \n",
       "percent_obese                                  0.323396   \n",
       "copd_death_rate                                0.268754   \n",
       "hypertension_death_rate                        1.000000   \n",
       "total_heart_disease_death_rate                 0.404890   \n",
       "\n",
       "                                total_heart_disease_death_rate  \n",
       "FIPS                                                 -0.070901  \n",
       "year                                                 -0.065718  \n",
       "percent_65plus                                       -0.068018  \n",
       "percent_smokers                                       0.498589  \n",
       "percent_diabetes                                      0.576924  \n",
       "percent_obese                                         0.515350  \n",
       "copd_death_rate                                       0.551128  \n",
       "hypertension_death_rate                               0.404890  \n",
       "total_heart_disease_death_rate                        1.000000  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "severity_historical = pd.read_csv(\"severity-data/severity_historical.csv\")\n",
    "severity_historical.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis of Variance (ANOVA) Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The one-way ANOVA tests the null hypothesis that two or more groups  have the same population mean. The test is applied to samples from two or more groups, possibly with differing sizes. The code below calculates the ANOVA for each variable across years. A p-value of 0.05 tell us that there is a less than 5% probability than the difference in  means is observed due to random chance; in other words, the difference is statistically significant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Oneway ANOVA for percent_65plus:\n",
      "F_onewayResult(statistic=137.71805490891103, pvalue=5.758164785293364e-172)\n",
      "\n",
      "\n",
      "Oneway ANOVA for percent_smokers:\n",
      "F_onewayResult(statistic=146.35718442700266, pvalue=4.437363844713898e-182)\n",
      "\n",
      "\n",
      "Oneway ANOVA for percent_diabetes:\n",
      "F_onewayResult(statistic=58.60639802606615, pvalue=2.6757457998796247e-72)\n",
      "\n",
      "\n",
      "Oneway ANOVA for percent_obese:\n",
      "F_onewayResult(statistic=99.68925168995672, pvalue=3.038311883517604e-124)\n",
      "\n",
      "\n",
      "Oneway ANOVA for copd_death_rate:\n",
      "F_onewayResult(statistic=8.812197406087728, pvalue=1.2786528199149814e-09)\n",
      "\n",
      "\n",
      "Oneway ANOVA for hypertension_death_rate:\n",
      "F_onewayResult(statistic=54.46609146470737, pvalue=4.92366583841111e-67)\n",
      "\n",
      "\n",
      "Oneway ANOVA for total_heart_disease_death_rate:\n",
      "F_onewayResult(statistic=15.19675969306489, pvalue=1.8824646284400096e-17)\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for colname in severity_historical.drop(labels = [\"FIPS\", \"year\"], axis = 1).columns.tolist():\n",
    "    df = severity_historical.loc[severity_historical[colname].isnull() == False, [\"year\", colname]]\n",
    "    \n",
    "    for_anova = [df.loc[df[\"year\"] == year, colname].tolist() for year in df.year.unique()]\n",
    "    \n",
    "    print(\"Oneway ANOVA for {col}:\".format(col = colname) )\n",
    "    print(f_oneway(for_anova[0], for_anova[1], for_anova[2], for_anova[3], for_anova[4], for_anova[5], for_anova[6]))\n",
    "    print(\"\\n\")\n",
    "    \n",
    "#del df, for_anova"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The code below analyzes variance using an alternative metric, the Kruskal-Wallis H-test. The Kruskal-Wallis H-test tests the null hypothesis that the population median of all of the groups are equal. This nonparametric method for is used for samples that do not satisfy the normality assumption. The p-value returned uses the assumption that H has a chi square distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kruskal-Wallis H-test for percent_65plus:\n",
      "KruskalResult(statistic=866.5962841029271, pvalue=6.245340737124806e-184)\n",
      "\n",
      "\n",
      "Kruskal-Wallis H-test for percent_smokers:\n",
      "KruskalResult(statistic=1030.6795871706354, pvalue=2.068303027461346e-219)\n",
      "\n",
      "\n",
      "Kruskal-Wallis H-test for percent_diabetes:\n",
      "KruskalResult(statistic=140.86637833493165, pvalue=6.578241119325072e-28)\n",
      "\n",
      "\n",
      "Kruskal-Wallis H-test for percent_obese:\n",
      "KruskalResult(statistic=573.9540509354287, pvalue=9.663897847573912e-121)\n",
      "\n",
      "\n",
      "Kruskal-Wallis H-test for copd_death_rate:\n",
      "KruskalResult(statistic=36.90645844979091, pvalue=1.8363856946361619e-06)\n",
      "\n",
      "\n",
      "Kruskal-Wallis H-test for hypertension_death_rate:\n",
      "KruskalResult(statistic=294.30404390833473, pvalue=1.358606915444857e-60)\n",
      "\n",
      "\n",
      "Kruskal-Wallis H-test for total_heart_disease_death_rate:\n",
      "KruskalResult(statistic=104.00638152930739, pvalue=3.6561988301915885e-20)\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for colname in severity_historical.drop(labels = [\"FIPS\", \"year\"], axis = 1).columns.tolist():\n",
    "    df = severity_historical.loc[severity_historical[colname].isnull() == False, [\"year\", colname]]\n",
    "    \n",
    "    for_kruskal = [df.loc[df[\"year\"] == year, colname].tolist() for year in df.year.unique()]\n",
    "    \n",
    "    print(\"Kruskal-Wallis H-test for {col}:\".format(col = colname) )\n",
    "    print(kruskal(for_kruskal[0], for_kruskal[1], for_kruskal[2], for_kruskal[3], for_kruskal[4], for_kruskal[5], for_kruskal[6]))\n",
    "    print(\"\\n\")\n",
    "    \n",
    "#del df, for_kruskal"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
